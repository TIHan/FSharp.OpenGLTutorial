<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Ferop</name></assembly>
<members>
<member name="M:Ferop.Ferop.C(System.String)">
<summary>
 &apos;C&apos; contains the code that will be compiled.
 Ferop will always remove this call when used in a static method marked with the &apos;Import&apos; attribute
 that is inside a class marked with the &apos;Ferop&apos; attribute.
</summary>
</member>
<member name="M:Ferop.Ferop.C``1(System.String)">
<summary>
 &apos;C&apos; contains the code that will be compiled.
 Ferop will always remove this call when used in a static method marked with the &apos;Import&apos; attribute
 that is inside a class marked with the &apos;Ferop&apos; attribute.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Ferop.ExportAttribute">
<summary>
 Marks a static method that tells Ferop that this method needs to be
 accessible in C/C++. This is handled automatically.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.ImportAttribute">
<summary>
 Marks a static method that tells Ferop to compile code in C/C++
 that is contained in the method. The method will be modified to
 a P/Invoke method that will interop with the compiled code.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.SourceAttribute">
<summary>
 Marks a class that contains the &apos;Ferop&apos; attribute to inject the given
 C/C++ code in the source file after the source include lines.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.HeaderAttribute">
<summary>
 Marks a class that contains the &apos;Ferop&apos; attribute to inject the given
 C/C++ code in the header file after the default header code.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.CppAttribute">
<summary>
 Marks a class to allow its imported static methods to contain C++ code.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.MsvcWinAttribute">
<summary>
 Marks a class to allow a hook into the MSVC command line arguments when compiling
 C/C++ on Windows. The hook is {options}.

 The compiler must have access to &lt;stdint.h&gt;.

 Ferop will try to choose the very latest MSVC version based on what is stored in
 &apos;HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\Microsoft\VisualStudio\SxS\Vs7&apos; first, then
 &apos;HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\VisualStudio\SxS\Vs7&apos; last.

 32-bit / 64-bit C/C++:
     cl.exe {cFile} {options} /link /DLL /OUT:{dllName}
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.GccLinuxAttribute">
<summary>
 Marks a class to allow a hook into the gcc/g++ command line arguments when compiling
 C/C++ on Linux. The two hooks are {flags} and {libs}.

 The compiler must have access to &lt;stdint.h&gt;.
 
 32-bit C:
     gcc -Wall -m32 -fPIC {flags} -c {cFile} -o {oFile}
 32-bit C++:
     g++ -Wall -m32 -fPIC {flags} -c {cFile} -o {oFile}
 32-bit Dynamic Library:
     gcc -m32 -fPIC {oFile} -shared -o {soName} {libs}
 64-bit C:
     gcc -Wall -m64 -fPIC {flags} -c {cFile} -o {oFile}
 64-bit C++:
     g++ -Wall -m64 -fPIC {flags} -c {cFile} -o {oFile}
 64-bit Dynamic Library:
     g++ -m64 -fPIC {oFile} -shared -o {soName} {libs}
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.ClangOsxAttribute">
<summary>
 Marks a class to allow a hook into the clang command line arguments when compiling
 C/C++ on OSX. The two hooks are {flags} and {libs}.

 The compiler must have access to &lt;stdint.h&gt;.

 32-bit C:   
     clang -Wall -arch i386 {flags} -c {cFile} -o {oFile}
 32-bit C++: 
     clang -Wall -arch i386 {flags} -c {cFile} -o {oFile}
 32-bit Dynamic Library: 
     clang -arch i386 -dynamiclib -headerpad_max_install_names -undefined dynamic_lookup -compatibility_version 1.0 -current_version 1.0 {libs} {oFile} -o {dylibName}
 64-bit C:   
     clang -Wall -arch x86_64 {flags} -c {cFile} -o {oFile}
 64-bit C++: 
     clang -Wall -arch x86_64 {flags} -c {cFile} -o {oFile}
 64-bit Dynamic Library: 
     clang -arch x86_64 -dynamiclib -headerpad_max_install_names -undefined dynamic_lookup -compatibility_version 1.0 -current_version 1.0 {libs} {oFile} -o {dylibName}
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.FeropAttribute">
<summary>
 Marks a class to let Ferop know that its containing static methods marked with the
 &apos;Import&apos; attribute and an &apos;C&apos; call will be compiled with a C/C++, then
 the methods will be modified to be P/Invoke methods calling into the compiled code
 that was in the &apos;C&apos; call.

 Static methods marked with &apos;Export&apos; attribute will tell the C/C++ compiler
 that the method needs to be called from within C/C++; this is handled
 automatically.

 Ferop will be able to determine to compile 32-bit or 64-bit C/C++ based on what
 architecture is defined by the assembly.
</summary>
</member>
<member name="M:Ferop.FeropModule.C``1(System.String)">
<summary>
 &apos;C&apos; contains the code that will be compiled.
 Ferop will always remove this call when used in a static method marked with the &apos;Import&apos; attribute
 that is inside a class marked with the &apos;Ferop&apos; attribute.
</summary>
</member>
<member name="">

</member>
<member name="T:Ferop.FeropModule">

</member>
</members>
</doc>
